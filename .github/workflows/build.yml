name: Build and Release moonPy

on:
  push:
    # Only trigger on tags like v1.0.0
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build executable
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pyinstaller moonPy.py --name moonPy --onefile --windowed --noconfirm --clean --paths=. --hidden-import=PyQt5.QtCore --hidden-import=PyQt5.QtGui --hidden-import=PyQt5.QtWidgets --hidden-import=PyQt5.QtPrintSupport --exclude-module=PySide6
          else
            pyinstaller moonPy.py --name moonPy --onefile --windowed --noconfirm --clean --paths=. --hidden-import=PyQt5.QtCore --hidden-import=PyQt5.QtGui --hidden-import=PyQt5.QtWidgets --hidden-import=PyQt5.QtPrintSupport --exclude-module=PySide6
          fi

      - name: Prepare artifact name and path
        id: prep
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "artifact_name=moonPy-windows.exe" >> $GITHUB_OUTPUT
            echo "artifact_path=dist/moonPy.exe" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "artifact_name=moonPy-macos" >> $GITHUB_OUTPUT
            echo "artifact_path=dist/moonPy" >> $GITHUB_OUTPUT
          else
            echo "artifact_name=moonPy-linux" >> $GITHUB_OUTPUT
            echo "artifact_path=dist/moonPy" >> $GITHUB_OUTPUT
          fi

      - name: Upload executable as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prep.outputs.artifact_name }}
          path: ${{ steps.prep.outputs.artifact_path }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./release_artifacts

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: ./release_artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

